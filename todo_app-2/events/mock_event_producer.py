"""
Mock Event Producer –¥–ª—è —Ç–µ—Å—Ç—É–≤–∞–Ω–Ω—è GraphQL API –±–µ–∑ RabbitMQ
"""
import json
from datetime import datetime
from typing import Dict, Any

class MockEventProducer:
    """Mock implementation of EventProducer for testing without RabbitMQ"""
    
    def __init__(self):
        self.events = []  # –ó–±–µ—Ä—ñ–≥–∞—î–º–æ –ø–æ–¥—ñ—ó –≤ –ø–∞–º'—è—Ç—ñ –¥–ª—è —Ç–µ—Å—Ç—É–≤–∞–Ω–Ω—è
        print("üì° MockEventProducer initialized (no RabbitMQ required)")
    
    def send_event(self, event_type: str, payload: Dict[str, Any]) -> None:
        """–í—ñ–¥–ø—Ä–∞–≤–∏—Ç–∏ –ø–æ–¥—ñ—é (mock implementation)"""
        event = {
            "event_type": event_type,
            "payload": payload,
            "timestamp": datetime.utcnow().isoformat(),
            "event_id": len(self.events) + 1
        }
        
        self.events.append(event)
        print(f"üì® Event sent: {event_type} -> {json.dumps(payload, default=str)}")
        
        # –î–ª—è GraphQL subscriptions - –¥–æ–¥–∞—î–º–æ –≤ —á–µ—Ä–≥—É
        try:
            import asyncio
            from graphqlapi.schema import event_queue
            
            # –î–æ–¥–∞—î–º–æ –ø–æ–¥—ñ—é –≤ —á–µ—Ä–≥—É –¥–ª—è subscriptions
            event_data = {
                'id': str(event.get('event_id')),
                'event_type': event_type,
                'payload': payload,
                'created_at': event['timestamp']
            }
            
            # –°—Ç–≤–æ—Ä—é—î–º–æ task –¥–ª—è –¥–æ–¥–∞–≤–∞–Ω–Ω—è –≤ —á–µ—Ä–≥—É
            try:
                loop = asyncio.get_event_loop()
                loop.create_task(event_queue.put(event_data))
            except RuntimeError:
                # –Ø–∫—â–æ –Ω–µ–º–∞—î –∞–∫—Ç–∏–≤–Ω–æ–≥–æ event loop, –ø—Ä–æ–ø—É—Å–∫–∞—î–º–æ
                pass
                
        except Exception as e:
            print(f"‚ö†Ô∏è Could not add event to subscription queue: {e}")
    
    def get_events(self):
        """–û—Ç—Ä–∏–º–∞—Ç–∏ –≤—Å—ñ –ø–æ–¥—ñ—ó (–¥–ª—è —Ç–µ—Å—Ç—É–≤–∞–Ω–Ω—è)"""
        return self.events
    
    def clear_events(self):
        """–û—á–∏—Å—Ç–∏—Ç–∏ —Å–ø–∏—Å–æ–∫ –ø–æ–¥—ñ–π"""
        self.events.clear()
